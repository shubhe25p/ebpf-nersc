/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __TRACE1_BPF_SKEL_H__
#define __TRACE1_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

#define BPF_SKEL_SUPPORTS_MAP_AUTO_ATTACH 1

struct trace1_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *cnt;
	} maps;
	struct {
		struct bpf_program *BPF_PROG1;
	} progs;
	struct {
		struct bpf_link *BPF_PROG1;
	} links;

#ifdef __cplusplus
	static inline struct trace1_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct trace1_bpf *open_and_load();
	static inline int load(struct trace1_bpf *skel);
	static inline int attach(struct trace1_bpf *skel);
	static inline void detach(struct trace1_bpf *skel);
	static inline void destroy(struct trace1_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
trace1_bpf__destroy(struct trace1_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
trace1_bpf__create_skeleton(struct trace1_bpf *obj);

static inline struct trace1_bpf *
trace1_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct trace1_bpf *obj;
	int err;

	obj = (struct trace1_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = trace1_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	trace1_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct trace1_bpf *
trace1_bpf__open(void)
{
	return trace1_bpf__open_opts(NULL);
}

static inline int
trace1_bpf__load(struct trace1_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct trace1_bpf *
trace1_bpf__open_and_load(void)
{
	struct trace1_bpf *obj;
	int err;

	obj = trace1_bpf__open();
	if (!obj)
		return NULL;
	err = trace1_bpf__load(obj);
	if (err) {
		trace1_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
trace1_bpf__attach(struct trace1_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
trace1_bpf__detach(struct trace1_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *trace1_bpf__elf_bytes(size_t *sz);

static inline int
trace1_bpf__create_skeleton(struct trace1_bpf *obj)
{
	struct bpf_object_skeleton *s;
	struct bpf_map_skeleton *map __attribute__((unused));
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "trace1_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = 24;
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt,
			sizeof(*s->maps) > 24 ? sizeof(*s->maps) : 24);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	map = (struct bpf_map_skeleton *)((char *)s->maps + 0 * s->map_skel_sz);
	map->name = "cnt";
	map->map = &obj->maps.cnt;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "BPF_PROG1";
	s->progs[0].prog = &obj->progs.BPF_PROG1;
	s->progs[0].link = &obj->links.BPF_PROG1;

	s->data = trace1_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *trace1_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x98\x0e\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x1a\0\
\x01\0\xb7\x01\0\0\0\0\0\0\x63\x1a\xfc\xff\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\
\0\0\xf0\xff\xff\xff\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xfc\xff\xff\xff\x85\0\0\0\
\x01\0\0\0\x7b\x0a\xf0\xff\0\0\0\0\x15\0\x02\0\0\0\0\0\xb7\x01\0\0\x01\0\0\0\
\xc3\x10\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x29\0\0\0\x05\
\0\x08\0\x02\0\0\0\x08\0\0\0\x15\0\0\0\x04\x08\x10\x02\x30\x9f\x04\x10\x68\x02\
\x7a\x0c\0\x04\x10\x38\x02\x7a\0\x04\x38\x60\x01\x50\0\x01\x11\x01\x25\x25\x13\
\x05\x03\x25\x72\x17\x10\x17\x1b\x25\x11\x1b\x12\x06\x73\x17\x8c\x01\x17\0\0\
\x02\x34\0\x03\x25\x49\x13\x3f\x19\x3a\x0b\x3b\x0b\x02\x18\0\0\x03\x01\x01\x49\
\x13\0\0\x04\x21\0\x49\x13\x37\x0b\0\0\x05\x24\0\x03\x25\x3e\x0b\x0b\x0b\0\0\
\x06\x24\0\x03\x25\x0b\x0b\x3e\x0b\0\0\x07\x13\x01\x0b\x0b\x3a\x0b\x3b\x0b\0\0\
\x08\x0d\0\x03\x25\x49\x13\x3a\x0b\x3b\x0b\x38\x0b\0\0\x09\x0f\0\x49\x13\0\0\
\x0a\x16\0\x49\x13\x03\x25\x3a\x0b\x3b\x05\0\0\x0b\x34\0\x03\x25\x49\x13\x3a\
\x0b\x3b\x0b\0\0\x0c\x15\x01\x49\x13\x27\x19\0\0\x0d\x05\0\x49\x13\0\0\x0e\x0f\
\0\0\0\x0f\x26\0\0\0\x10\x2e\x01\x11\x1b\x12\x06\x40\x18\x7a\x19\x03\x25\x3a\
\x0b\x3b\x0b\x27\x19\x49\x13\x3f\x19\0\0\x11\x05\0\x03\x25\x3a\x0b\x3b\x0b\x49\
\x13\0\0\x12\x34\0\x02\x22\x03\x25\x3a\x0b\x3b\x0b\x49\x13\0\0\0\xf5\0\0\0\x05\
\0\x01\x08\0\0\0\0\x01\0\x0c\0\x01\x08\0\0\0\0\0\0\0\x02\x02\x68\0\0\0\x08\0\0\
\0\x0c\0\0\0\x02\x03\x32\0\0\0\0\x18\x02\xa1\0\x03\x3e\0\0\0\x04\x42\0\0\0\x04\
\0\x05\x04\x06\x01\x06\x05\x08\x07\x02\x06\x51\0\0\0\0\x0b\x02\xa1\x01\x07\x20\
\0\x06\x08\x07\x7a\0\0\0\0\x07\0\x08\x09\x8f\0\0\0\0\x08\x08\x08\x0d\x8f\0\0\0\
\0\x09\x10\x08\x0e\x7a\0\0\0\0\x0a\x18\0\x09\x7f\0\0\0\x03\x8b\0\0\0\x04\x42\0\
\0\0\x01\0\x05\x08\x05\x04\x09\x94\0\0\0\x0a\x9d\0\0\0\x0c\x01\x53\x61\x0a\xa6\
\0\0\0\x0b\x01\x45\x61\x05\x0a\x07\x04\x0b\x0f\xb2\0\0\0\x02\x38\x09\xb7\0\0\0\
\x0c\xc7\0\0\0\x0d\xc7\0\0\0\x0d\xc8\0\0\0\0\x0e\x09\xcd\0\0\0\x0f\x10\x02\x68\
\0\0\0\x01\x5a\x10\0\x0e\x8b\0\0\0\x11\x11\0\x0e\xc7\0\0\0\x12\0\x09\0\x10\x94\
\0\0\0\x12\x01\x06\0\x11\x8f\0\0\0\0\0\x4c\0\0\0\x05\0\0\0\0\0\0\0\x65\0\0\0\
\x72\0\0\0\x98\0\0\0\xa0\0\0\0\xa5\0\0\0\xb9\0\0\0\xbd\0\0\0\xc2\0\0\0\xc6\0\0\
\0\xca\0\0\0\xd7\0\0\0\xdd\0\0\0\xe1\0\0\0\xe7\0\0\0\xf3\0\0\0\x07\x01\0\0\x11\
\x01\0\0\x63\x6c\x61\x6e\x67\x20\x76\x65\x72\x73\x69\x6f\x6e\x20\x31\x35\x2e\
\x30\x2e\x30\x20\x28\x67\x69\x74\x40\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\
\x3a\x6c\x6c\x76\x6d\x2f\x6c\x6c\x76\x6d\x2d\x70\x72\x6f\x6a\x65\x63\x74\x2e\
\x67\x69\x74\x20\x34\x62\x61\x36\x61\x39\x63\x39\x66\x36\x35\x62\x62\x63\x38\
\x62\x64\x30\x36\x65\x33\x36\x35\x32\x63\x62\x32\x30\x66\x64\x34\x64\x66\x63\
\x38\x34\x36\x31\x33\x37\x29\0\x74\x72\x61\x63\x65\x31\x2e\x62\x70\x66\x2e\x63\
\0\x2f\x68\x6f\x6d\x65\x2f\x65\x63\x32\x2d\x75\x73\x65\x72\x2f\x65\x62\x70\x66\
\x2d\x6e\x65\x72\x73\x63\x2f\x62\x70\x66\x5f\x68\x65\x6c\x70\x65\x72\x73\0\x4c\
\x49\x43\x45\x4e\x53\x45\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\
\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x63\x6e\x74\0\x74\x79\x70\x65\0\
\x69\x6e\x74\0\x6b\x65\x79\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\
\x5f\x5f\x75\x33\x32\0\x75\x33\x32\0\x76\x61\x6c\x75\x65\0\x6d\x61\x78\x5f\x65\
\x6e\x74\x72\x69\x65\x73\0\x62\x70\x66\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\
\x70\x5f\x65\x6c\x65\x6d\0\x42\x50\x46\x5f\x50\x52\x4f\x47\x31\0\x63\x74\x78\0\
\x1c\0\0\0\x05\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\
\xeb\x01\0\x18\0\0\0\0\0\0\0\x58\x01\0\0\x58\x01\0\0\x5b\x01\0\0\0\0\0\0\0\0\0\
\x02\x03\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\
\0\0\x02\0\0\0\x04\0\0\0\x01\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\
\0\0\0\0\0\x02\x06\0\0\0\x19\0\0\0\0\0\0\x08\x07\0\0\0\x1d\0\0\0\0\0\0\x08\x08\
\0\0\0\x23\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\
\x30\0\0\0\x01\0\0\0\0\0\0\0\x35\0\0\0\x05\0\0\0\x40\0\0\0\x39\0\0\0\x05\0\0\0\
\x80\0\0\0\x3f\0\0\0\x01\0\0\0\xc0\0\0\0\x4b\0\0\0\0\0\0\x0e\x09\0\0\0\x01\0\0\
\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x4f\0\0\0\x0b\0\0\0\
\x53\0\0\0\x01\0\0\x0c\x0c\0\0\0\x40\x01\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\
\0\0\0\0\0\0\x03\0\0\0\0\x0e\0\0\0\x04\0\0\0\x04\0\0\0\x45\x01\0\0\0\0\0\x0e\
\x0f\0\0\0\x01\0\0\0\x4d\x01\0\0\x01\0\0\x0f\0\0\0\0\x0a\0\0\0\0\0\0\0\x20\0\0\
\0\x53\x01\0\0\x01\0\0\x0f\0\0\0\0\x10\0\0\0\0\0\0\0\x04\0\0\0\0\x69\x6e\x74\0\
\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\
\x75\x33\x32\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\
\x6e\x74\0\x74\x79\x70\x65\0\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\x6d\x61\x78\
\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x63\x6e\x74\0\x63\x74\x78\0\x42\x50\x46\x5f\
\x50\x52\x4f\x47\x31\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x73\x79\x73\
\x63\x61\x6c\x6c\x73\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\x6f\x70\x65\
\x6e\x61\x74\0\x2f\x68\x6f\x6d\x65\x2f\x65\x63\x32\x2d\x75\x73\x65\x72\x2f\x65\
\x62\x70\x66\x2d\x6e\x65\x72\x73\x63\x2f\x62\x70\x66\x5f\x68\x65\x6c\x70\x65\
\x72\x73\x2f\x74\x72\x61\x63\x65\x31\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\
\x42\x50\x46\x5f\x50\x52\x4f\x47\x31\x28\x76\x6f\x69\x64\x2a\x20\x63\x74\x78\
\x29\0\x20\x20\x20\x20\x75\x33\x32\x20\x6b\x65\x79\x20\x3d\x20\x30\x3b\0\x20\
\x20\x20\x20\x75\x33\x32\x2a\x20\x63\x6e\x74\x20\x3d\x20\x62\x70\x66\x5f\x6d\
\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\x63\x6e\x74\
\x2c\x20\x26\x6b\x65\x79\x29\x3b\0\x20\x20\x20\x20\x69\x66\x28\x21\x63\x6e\x74\
\x29\0\x20\x20\x20\x20\x5f\x5f\x73\x79\x6e\x63\x5f\x66\x65\x74\x63\x68\x5f\x61\
\x6e\x64\x5f\x61\x64\x64\x28\x63\x6e\x74\x2c\x20\x31\x29\x3b\0\x7d\0\x63\x68\
\x61\x72\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2e\x6d\x61\x70\x73\0\x6c\x69\x63\x65\
\x6e\x73\x65\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x8c\0\0\0\
\xa0\0\0\0\0\0\0\0\x08\0\0\0\x5d\0\0\0\x01\0\0\0\0\0\0\0\x0d\0\0\0\x10\0\0\0\
\x5d\0\0\0\x08\0\0\0\0\0\0\0\x82\0\0\0\xb5\0\0\0\0\x38\0\0\x08\0\0\0\x82\0\0\0\
\xce\0\0\0\x09\x40\0\0\x18\0\0\0\x82\0\0\0\0\0\0\0\0\0\0\0\x30\0\0\0\x82\0\0\0\
\xdf\0\0\0\x10\x44\0\0\x38\0\0\0\x82\0\0\0\xdf\0\0\0\x0a\x44\0\0\x40\0\0\0\x82\
\0\0\0\x0f\x01\0\0\x08\x48\0\0\x50\0\0\0\x82\0\0\0\x1c\x01\0\0\x05\x50\0\0\x58\
\0\0\0\x82\0\0\0\x3e\x01\0\0\x01\x58\0\0\0\0\0\0\x0c\0\0\0\xff\xff\xff\xff\x04\
\0\x08\0\x08\x7c\x0b\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x68\0\0\0\0\0\0\0\xa9\
\0\0\0\x05\0\x08\0\x69\0\0\0\x08\x01\x01\xfb\x0e\x0d\0\x01\x01\x01\x01\0\0\0\
\x01\0\0\x01\x01\x01\x1f\x03\0\0\0\0\x26\0\0\0\x28\0\0\0\x03\x01\x1f\x02\x0f\
\x05\x1e\x03\x39\0\0\0\0\x04\x23\x09\x09\xce\x52\x4e\xa2\xb8\xa9\xa9\xb7\x6d\
\x16\x13\x9e\x46\0\0\0\x01\x43\xb2\xf3\xd4\xd2\x89\x63\x12\xd4\xcf\x26\xc3\xcf\
\x25\x9a\xad\x50\0\0\0\x02\x74\x22\xca\x06\xc9\xdc\x86\xeb\xa2\xf2\x68\xa5\x7d\
\x8a\xcf\x2f\x04\0\0\x09\x02\0\0\0\0\0\0\0\0\x03\x0e\x01\x05\x09\x0a\x21\x06\
\x03\x70\x20\x05\x10\x06\x03\x11\x4a\x05\x0a\x06\x20\x05\x08\x06\x21\x06\x03\
\x6e\x20\x05\x05\x06\x03\x14\x20\x05\x01\x22\x02\x02\0\x01\x01\x2f\x68\x6f\x6d\
\x65\x2f\x65\x63\x32\x2d\x75\x73\x65\x72\x2f\x65\x62\x70\x66\x2d\x6e\x65\x72\
\x73\x63\x2f\x62\x70\x66\x5f\x68\x65\x6c\x70\x65\x72\x73\0\x2e\0\x2f\x75\x73\
\x72\x2f\x69\x6e\x63\x6c\x75\x64\x65\x2f\x62\x70\x66\0\x74\x72\x61\x63\x65\x31\
\x2e\x62\x70\x66\x2e\x63\0\x76\x6d\x6c\x69\x6e\x75\x78\x2e\x68\0\x62\x70\x66\
\x5f\x68\x65\x6c\x70\x65\x72\x5f\x64\x65\x66\x73\x2e\x68\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xea\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x01\0\0\0\0\
\x03\0\x58\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x06\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x03\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\
\0\x0a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0c\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\
\0\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x15\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x03\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1f\x01\0\0\
\x12\0\x03\0\0\0\0\0\0\0\0\0\x68\0\0\0\0\0\0\0\x10\x01\0\0\x11\0\x04\0\0\0\0\0\
\0\0\0\0\x04\0\0\0\0\0\0\0\x22\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\
\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x11\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\
\0\x15\0\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\x1f\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\
\x23\0\0\0\0\0\0\0\x03\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x0c\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x10\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x14\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x18\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x1c\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x20\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x24\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x28\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x2c\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x30\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x34\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x38\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x3c\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x40\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x44\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x48\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x4c\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x08\0\0\0\0\0\0\0\x02\0\0\0\x0d\0\0\0\
\x10\0\0\0\0\0\0\0\x02\0\0\0\x0e\0\0\0\x18\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\
\x50\x01\0\0\0\0\0\0\x04\0\0\0\x0e\0\0\0\x68\x01\0\0\0\0\0\0\x04\0\0\0\x0d\0\0\
\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\
\x50\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\
\x70\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x80\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\
\x90\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xa0\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\
\xb0\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x14\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\
\x18\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x22\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\
\x26\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x2a\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\
\x36\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x4b\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\
\x60\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x7a\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\
\x0c\x0d\x0e\0\x2e\x64\x65\x62\x75\x67\x5f\x61\x62\x62\x72\x65\x76\0\x2e\x74\
\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x63\x6e\x74\0\
\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x73\x79\x73\x63\x61\x6c\x6c\x73\
\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\x6f\x70\x65\x6e\x61\x74\0\x2e\x64\
\x65\x62\x75\x67\x5f\x6c\x6f\x63\x6c\x69\x73\x74\x73\0\x2e\x72\x65\x6c\x2e\x64\
\x65\x62\x75\x67\x5f\x73\x74\x72\x5f\x6f\x66\x66\x73\x65\x74\x73\0\x2e\x6d\x61\
\x70\x73\0\x2e\x64\x65\x62\x75\x67\x5f\x73\x74\x72\0\x2e\x64\x65\x62\x75\x67\
\x5f\x6c\x69\x6e\x65\x5f\x73\x74\x72\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\
\x5f\x61\x64\x64\x72\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x69\x6e\x66\
\x6f\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x6c\x69\x63\x65\
\x6e\x73\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\0\
\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x66\x72\x61\x6d\x65\0\x74\x72\x61\
\x63\x65\x31\x2e\x62\x70\x66\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\
\x79\x6d\x74\x61\x62\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x49\x43\x45\x4e\
\x53\x45\0\x4c\x42\x42\x30\x5f\x32\0\x42\x50\x46\x5f\x50\x52\x4f\x47\x31\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf7\0\0\0\x03\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6b\x0d\0\0\0\0\0\0\x29\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x26\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x40\0\0\0\0\0\0\0\x68\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\xc1\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\0\0\0\0\0\0\
\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x72\0\0\
\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb0\0\0\0\0\0\0\0\x20\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4b\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd0\0\0\0\0\0\0\0\x2d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xfd\0\0\0\0\0\0\0\xdc\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\xa7\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd9\x01\
\0\0\0\0\0\0\xf9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xa3\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\x0a\0\0\0\0\0\0\
\x50\0\0\0\0\0\0\0\x19\0\0\0\x08\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x5f\
\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd2\x02\0\0\0\0\0\0\x50\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5b\0\0\0\x09\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd8\x0a\0\0\0\0\0\0\x20\x01\0\0\0\0\0\0\x19\
\0\0\0\x0a\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x78\0\0\0\x01\0\0\0\x30\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x22\x03\0\0\0\0\0\0\x15\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x97\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x37\x04\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xf8\x0b\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x19\0\0\0\x0d\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\x0b\x01\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x58\
\x04\0\0\0\0\0\0\xcb\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x07\x01\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\x0c\0\0\0\
\0\0\0\x20\0\0\0\0\0\0\0\x19\0\0\0\x0f\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\x19\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x24\x07\0\0\0\0\0\0\xc0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\x09\
\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\x0c\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\
\x19\0\0\0\x11\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xdd\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\x07\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd9\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\xd8\x0c\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x19\0\0\0\x13\0\0\0\x08\
\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xcd\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x10\x08\0\0\0\0\0\0\xad\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\xc9\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf8\x0c\
\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\x19\0\0\0\x15\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\
\0\0\0\0\x83\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xbd\x08\0\0\0\0\
\0\0\x62\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\xb3\
\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x68\x0d\0\0\0\0\0\0\
\x03\0\0\0\0\0\0\0\x19\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\0\0\
\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x09\0\0\0\0\0\0\x68\x01\0\0\0\
\0\0\0\x01\0\0\0\x0c\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct trace1_bpf *trace1_bpf::open(const struct bpf_object_open_opts *opts) { return trace1_bpf__open_opts(opts); }
struct trace1_bpf *trace1_bpf::open_and_load() { return trace1_bpf__open_and_load(); }
int trace1_bpf::load(struct trace1_bpf *skel) { return trace1_bpf__load(skel); }
int trace1_bpf::attach(struct trace1_bpf *skel) { return trace1_bpf__attach(skel); }
void trace1_bpf::detach(struct trace1_bpf *skel) { trace1_bpf__detach(skel); }
void trace1_bpf::destroy(struct trace1_bpf *skel) { trace1_bpf__destroy(skel); }
const void *trace1_bpf::elf_bytes(size_t *sz) { return trace1_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
trace1_bpf__assert(struct trace1_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __TRACE1_BPF_SKEL_H__ */
